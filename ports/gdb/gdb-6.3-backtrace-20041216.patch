2004-12-16  Jeff Johnston  <jjohnstn@redhat.com>

	* stack.c (backtrace_command_args): New struct.
	(backtrace_command_stub): New function.
	(backtrace_command): Call backtrace_command_stub wrapped
	in a catch_errors call.
	(backtrace_full_command): Ditto.
	* defs.h (vfatal, fatal): New prototypes.
	* utils.c (fatal, vfatal): New functions.
	(error_stream_1): Ditto.
	(error_stream): Call error_stream_1.
	
--- gdb-6.3/gdb/stack.c.fix	Thu Dec 16 17:02:48 2004
+++ gdb-6.3/gdb/stack.c	Thu Dec 16 17:04:11 2004
@@ -1186,6 +1186,22 @@ backtrace_command_1 (char *count_exp, in
     printf_filtered ("(More stack frames follow...)\n");
 }
 
+struct backtrace_command_args
+  {
+    char *count_exp;
+    int show_locals;
+    int from_tty;
+  };
+
+/* Stub to call backtrace_command_1 by way of an error catcher.  */
+static int
+backtrace_command_stub (void *data)
+{
+  struct backtrace_command_args *args = (struct backtrace_command_args *)data;
+  backtrace_command_1 (args->count_exp, args->show_locals, args->from_tty);
+  return 0;
+}
+
 static void
 backtrace_command (char *arg, int from_tty)
 {
@@ -1193,6 +1209,7 @@ backtrace_command (char *arg, int from_t
   char **argv = (char **) NULL;
   int argIndicatingFullTrace = (-1), totArgLen = 0, argc = 0;
   char *argPtr = arg;
+  struct backtrace_command_args btargs;
 
   if (arg != (char *) NULL)
     {
@@ -1242,7 +1259,10 @@ backtrace_command (char *arg, int from_t
 	}
     }
 
-  backtrace_command_1 (argPtr, (argIndicatingFullTrace >= 0), from_tty);
+  btargs.count_exp = argPtr;
+  btargs.show_locals = (argIndicatingFullTrace >= 0);
+  btargs.from_tty = from_tty;
+  catch_errors (backtrace_command_stub, (char *)&btargs, "", RETURN_MASK_ERROR);
 
   if (argIndicatingFullTrace >= 0 && totArgLen > 0)
     xfree (argPtr);
@@ -1255,7 +1275,11 @@ static void backtrace_full_command (char
 static void
 backtrace_full_command (char *arg, int from_tty)
 {
-  backtrace_command_1 (arg, 1, from_tty);
+  struct backtrace_command_args btargs;
+  btargs.count_exp = arg;
+  btargs.show_locals = 1;
+  btargs.from_tty = from_tty;
+  catch_errors (backtrace_command_stub, (char *)&btargs, "", RETURN_MASK_ERROR);
 }
 
 
--- gdb-6.3/gdb/defs.h.fix	Thu Dec 16 17:02:54 2004
+++ gdb-6.3/gdb/defs.h	Thu Dec 16 17:04:11 2004
@@ -911,6 +911,10 @@ extern char *error_last_message (void);
 /* Output arbitrary error message.  */
 extern void error_output_message (char *pre_print, char *msg);
 
+extern NORETURN void vfatal (const char *fmt, va_list ap) ATTR_NORETURN;
+
+extern NORETURN void fatal (const char *fmt, ...) ATTR_NORETURN ATTR_FORMAT (printf, 1, 2);
+
 extern NORETURN void internal_verror (const char *file, int line,
 				      const char *, va_list ap) ATTR_NORETURN;
 
--- gdb-6.3/gdb/utils.c.fix	Thu Dec 16 17:03:02 2004
+++ gdb-6.3/gdb/utils.c	Thu Dec 16 17:04:11 2004
@@ -104,6 +104,9 @@ static void prompt_for_continue (void);
 static void set_screen_size (void);
 static void set_width (void);
 
+static NORETURN void error_stream_1 (struct ui_file *stream, 
+				     enum return_reason reason) ATTR_NORETURN;
+
 /* Chain of cleanup actions established with make_cleanup,
    to be executed if an error happens.  */
 
@@ -620,7 +623,7 @@ verror (const char *string, va_list args
   struct ui_file *tmp_stream = mem_fileopen ();
   make_cleanup_ui_file_delete (tmp_stream);
   vfprintf_unfiltered (tmp_stream, string, args);
-  error_stream (tmp_stream);
+  error_stream_1 (tmp_stream, RETURN_ERROR);
 }
 
 NORETURN void
@@ -632,6 +635,28 @@ error (const char *string, ...)
   va_end (args);
 }
 
+/* Print an error message and quit.
+   The first argument STRING is the error message, used as a fprintf string,
+   and the remaining args are passed as arguments to it.  */
+
+NORETURN void
+vfatal (const char *string, va_list args)
+{
+  struct ui_file *tmp_stream = mem_fileopen ();
+  make_cleanup_ui_file_delete (tmp_stream);
+  vfprintf_unfiltered (tmp_stream, string, args);
+  error_stream_1 (tmp_stream, RETURN_QUIT);
+}
+
+NORETURN void
+fatal (const char *string, ...)
+{
+  va_list args;
+  va_start (args, string);
+  vfatal (string, args);
+  va_end (args);
+}
+
 static void
 do_write (void *data, const char *buffer, long length_buffer)
 {
@@ -670,8 +695,8 @@ error_output_message (char *pre_print, c
   fprintf_filtered (gdb_stderr, "\n");
 }
 
-NORETURN void
-error_stream (struct ui_file *stream)
+static NORETURN void
+error_stream_1 (struct ui_file *stream, enum return_reason reason)
 {
   if (deprecated_error_begin_hook)
     deprecated_error_begin_hook ();
@@ -690,7 +715,13 @@ error_stream (struct ui_file *stream)
   ui_file_put (stream, do_write, gdb_stderr);
   fprintf_filtered (gdb_stderr, "\n");
 
-  throw_exception (RETURN_ERROR);
+  throw_exception (reason);
+}
+
+NORETURN void
+error_stream (struct ui_file *stream)
+{
+  error_stream_1 (stream, RETURN_ERROR);
 }
 
 /* Get the last error message issued by gdb */
